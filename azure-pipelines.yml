trigger:
  branches:
    include:
      - main

pool: Laptop   # ðŸ‘ˆ  self-hosted from Laptop

variables: 
  buildConfiguration: 'Release'
  projectSolution: '**/IT_Hardware.sln'
  publishDir: '$(Build.ArtifactStagingDirectory)/publish'

stages:
# ------------------------------
# 1. Build & Test + SonarCloud
# ------------------------------
- stage: BuildAndTest
  displayName: "Build, Test & SonarCloud"
  jobs:
  - job: Build
    steps:
      - checkout: self


      # Install .NET 9 Preview SDK
      - task: UseDotNet@2
        displayName: "Use .NET 9.0.x SDK"
        inputs:
          packageType: 'sdk'
          version: '9.0.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - script: |
          echo "##vso[task.setvariable variable=DOTNET_ROOT]$(Agent.ToolsDirectory)/dotnet"
          echo "##vso[task.setvariable variable=PATH]$(Agent.ToolsDirectory)/dotnet;$(PATH)"
        displayName: "Set DOTNET_ROOT"

      - script: dotnet --info
        displayName: "Check .NET SDK Version"

      # Restore
      - task: DotNetCoreCLI@2
        displayName: "Restore"
        inputs:
          command: 'restore'
          projects: '$(projectSolution)'

      # SonarCloud Prepare (FIXED service connection name)

# Install SonarScanner global tool
      - script: dotnet tool install --global dotnet-sonarscanner
        displayName: "Install SonarScanner Global Tool"

      # Add global tool path
      - script: |
          echo "##vso[task.setvariable variable=PATH]$PATH:$HOME/.dotnet/tools"
        displayName: "Set PATH for dotnet tools"

      # SonarCloud Begin Analysis
      - script: |
          dotnet sonarscanner begin \
            /k:"your-github-org_your-repo" \
            /o:"your-github-org" \
            /d:sonar.login="$(SONAR_TOKEN)" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.verbose=true
        displayName: "SonarCloud Begin Analysis"

      # Build
      - task: DotNetCoreCLI@2
        displayName: "Build"
        inputs:
          command: 'build'
          projects: '$(projectSolution)'
          arguments: '--configuration $(buildConfiguration) --no-restore'

      # Test
      - task: DotNetCoreCLI@2
        displayName: "Run Unit Tests"
        inputs:
          command: 'test'
          projects: '**/*Test*.csproj'
          arguments: '--configuration $(buildConfiguration) --no-build --logger trx --results-directory $(Build.SourcesDirectory)/TestResults'

      # Publish Test Results
      - task: PublishTestResults@2
        displayName: "Publish Unit Test Results"
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '*.trx'
          searchFolder: '$(Build.SourcesDirectory)/TestResults'
          failTaskOnFailedTests: false

      # SonarCloud End Analysis
      - script: dotnet sonarscanner end /d:sonar.login="$(SONAR_TOKEN)"
        displayName: "SonarCloud End Analysis"

      # SonarCloud Analyze & Publish
     # - task: SonarCloudAnalyze@3
      #- task: SonarCloudPublish@3
       # inputs:
        #  pollingTimeoutSec: '600'


# ------------------------------
# 2. Package & Publish Artifacts
# ------------------------------
- stage: Package
  displayName: "Package & Publish"
  dependsOn: BuildAndTest
  jobs:
  - job: PackageJob
    steps:
      - checkout: self
        clean: true

      - task: UseDotNet@2
        displayName: "Use .NET 9.0.x SDK"
        inputs:
          packageType: 'sdk'
          version: '9.0.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - script: |
          echo "##vso[task.setvariable variable=DOTNET_ROOT]$(Agent.ToolsDirectory)/dotnet"
          echo "##vso[task.setvariable variable=PATH]$(Agent.ToolsDirectory)/dotnet;$(PATH)"
        displayName: "Set DOTNET_ROOT"

      - script: dotnet --info
        displayName: "Check .NET SDK Version"

      - task: DotNetCoreCLI@2
        displayName: "Publish"
        inputs:
          command: 'publish'
          projects: '$(projectSolution)'
          arguments: '--configuration $(buildConfiguration) --output $(publishDir)'

      # Archive publish output into a ZIP (for deployment)
      - task: ArchiveFiles@2
        displayName: "Archive Published Files"
        inputs:
          rootFolderOrFile: '$(publishDir)'
          includeRootFolder: false
          archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
          replaceExistingArchive: true

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifacts"
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)/app.zip'
          artifactName: 'drop'
          publishLocation: 'Container'


# ------------------------------
# 3. Deploy to Azure (staging)
# ------------------------------
- stage: Deploy
  displayName: "Deploy to Azure App Service"
  dependsOn: Package
  jobs:
  - deployment: DeployWeb
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadBuildArtifacts@0
              inputs:
                artifactName: 'drop'
                downloadPath: '$(Pipeline.Workspace)'

            - task: AzureWebApp@1
              displayName: 'Deploy to Azure WebApp (Staging)'
              inputs:
                azureSubscription: 'Azure'   # ðŸ‘ˆ must match your Azure service connection
                appName: 'rajaicsi'
                package: '$(Pipeline.Workspace)/drop/app.zip'
