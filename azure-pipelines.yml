trigger:
  branches:
    include:
      - main

pool: Laptop

variables: 
  buildConfiguration: 'Release'
  projectSolution: '**/**IT_Hardware.sln'
  publishDir: '$(Build.ArtifactStagingDirectory)/publish'
  sonar_token: '2b84c2f32aab5010d71ad47dd9d15ca5e04a33be'

stages:
# ------------------------------
# 1. Build, Test & SonarCloud
# ------------------------------
- stage: BuildAndTest
  displayName: "Build, Test & SonarCloud"
  jobs:
  - job: Build
    steps:
      - checkout: self

      # Install .NET 9 SDK
      - task: UseDotNet@2
        displayName: "Use .NET 9.0.x SDK"
        inputs:
          packageType: 'sdk'
          version: '9.0.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - script: dotnet --info
        displayName: "Check .NET SDK Version"

      - task: NuGetAuthenticate@1
        displayName: "Authenticate to Azure Artifacts"

      # Install SonarScanner as global tool
      - script: dotnet tool install --global dotnet-sonarscanner
        displayName: "Install SonarScanner for .NET"

      # Run SonarScanner Begin + Build + End
      - script: |
          dotnet sonarscanner begin \
            /o:"hrisikeshkumar" \
            /k:"hrisikeshkumar_itassetshq" \
            /d:sonar.token="$(sonar_token)" \
            /d:sonar.host.url="https://sonarcloud.io"

          dotnet restore $(projectSolution)

          dotnet build $(projectSolution) --configuration $(buildConfiguration)

          dotnet test **/*Tests.csproj --configuration $(buildConfiguration) --no-build --logger trx --results-directory $(Build.SourcesDirectory)/TestResults

          dotnet sonarscanner end /d:sonar.token="$(sonar_token)"
        displayName: "Run SonarScanner with Build & Test"
        env:
          SONAR_TOKEN: $(sonar_token)   # stored as secret variable in Azure DevOps

      # Publish Unit Test Results
      - task: PublishTestResults@2
        displayName: "Publish Unit Test Results"
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: 'TestResults/*.trx'
          searchFolder: '$(Build.SourcesDirectory)/TestResults'
          failTaskOnFailedTests: false

# ------------------------------
# 2. Package
# ------------------------------
- stage: Package
  displayName: "Package & Publish"
  dependsOn: BuildAndTest
  jobs:
  - job: PackageJob
    steps:
      - checkout: self
        clean: true

      - task: UseDotNet@2
        displayName: "Use .NET 9.0.x SDK"
        inputs:
          packageType: 'sdk'
          version: '9.0.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - task: DotNetCoreCLI@2
        displayName: "Publish"
        inputs:
          command: 'publish'
          projects: '$(projectSolution)'
          arguments: '--configuration $(buildConfiguration) --output $(publishDir)'

      - task: ArchiveFiles@2
        displayName: "Archive Published Files"
        inputs:
          rootFolderOrFile: '$(publishDir)'
          includeRootFolder: false
          archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
          replaceExistingArchive: true

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifacts"
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)/app.zip'
          artifactName: 'drop'
          publishLocation: 'Container'

# ------------------------------
# 3. Deploy to Azure (Staging)
# ------------------------------
- stage: Deploy
  displayName: "Deploy to Azure App Service"
  dependsOn: Package
  jobs:
  - deployment: DeployWeb
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadBuildArtifacts@0
              inputs:
                artifactName: 'drop'
                downloadPath: '$(Pipeline.Workspace)'

            - task: AzureWebApp@1
              displayName: 'Deploy to Azure WebApp (Staging)'
              inputs:
                azureSubscription: 'Azure'
                appName: 'rajaicsi'
                package: '$(Pipeline.Workspace)/drop/app.zip'
